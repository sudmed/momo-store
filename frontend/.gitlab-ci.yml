variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  # var for hub.docker.com authenticating - to prevent error "toomanyrequests: reached pull rate limit"
  DOCKER_AUTH_CONFIG: '{ "auths": { "https://index.docker.io/v1/": { "auth": "$DOCKER_AUTH" } }}'


include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'


stages:
  - build
  - test
  - docker
  - deploy


build-front:
  stage: build
  image: node:16.18.0
  script:
    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt
    - cd frontend
    - npx browserslist@latest --update-db
    - npm install -g npm@8.19.3
    - npm install
    - npm run build
    - mkdir -p momo-store-${VERSION}
    - mv dist momo-store-${VERSION}/html
  after_script:
    - cd frontend
    - tar czvf momo-store-${VERSION}.tar.gz momo-store-${VERSION}
    - curl -v -u "${NEXUS_USER}:${NEXUS_PASS}" --upload-file momo-store-$VERSION.tar.gz ${NEXUS_URL}/06-momostore-pashkov-frontend/$VERSION/momo-store-frontend-$VERSION.tar.gz
  artifacts:
    paths:
      - frontend/momo-store-${VERSION}/html
    reports:
      dotenv: CI_JOB_ID.txt
  rules:
    - changes:
      - frontend/**/*


gosec-sast:
  variables:
    COMPILE: "false"


sonarqube-frontend:
  stage: test
  image:
    name: "sonarsource/sonar-scanner-cli:latest"
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
    - .sonar/cache
  script:
    - cd frontend
    - sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONTEND} -Dsonar.sources=. -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONAR_LOGIN_FRONT}
  dependencies:
    - build-front


docker-build-and-release:
  stage: docker
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - mkdir -p $HOME/.docker
    - echo "$DOCKER_AUTH_CONFIG" > $HOME/.docker/config.json
  script:
    - cd frontend
    - >
      docker build
      --no-cache
      --build-arg VUE_APP_API_URL=$API_URL_SWARM
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/momo-frontend:$VERSION
      --tag $CI_REGISTRY_IMAGE/momo-frontend:latest
      .
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/momo-frontend:$VERSION
    - docker push $CI_REGISTRY_IMAGE/momo-frontend:latest
  dependencies:
    - sonarqube-frontend


deploy-frontend:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash docker
    - until docker info; do sleep 1; done
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_SWARM" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $SWARM_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - docker context create momo --docker "host=ssh://${SWARM_USER}@${SWARM_HOST}"
    - docker --context momo login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - if docker --context momo stack ls | grep momo-store | awk '{print $1;}';
      then
        echo "Momo-store stack found. Updating frontend service only...";
        docker --context momo service update --with-registry-auth --image $CI_REGISTRY_IMAGE/momo-frontend:$VERSION momo-store_frontend;
      else
        echo "No momo-store services found. Full stack deploy started...";
        docker --context momo stack deploy --with-registry-auth --resolve-image always --prune --compose-file docker-compose-stack.yml momo-store;
      fi
    - docker -H ssh://${SWARM_USER}@${SWARM_HOST} stack ls
    - docker --context momo service ls
